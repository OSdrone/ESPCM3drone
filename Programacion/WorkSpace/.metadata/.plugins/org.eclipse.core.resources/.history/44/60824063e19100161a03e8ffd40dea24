/*
 * ServidoresVariables.c
 *
 *  Created on: 12 de oct. de 2016
 *      Author: Ruben
 */

#include "ServidoresVariables.h"

/*  FILA  */
static volatile uint8_t IndiceEscrituraIMU = 0; //Indica Posicion a rellenar
static volatile uint8_t IndiceLecturaIMU = 0; //Debe leerse hasta que sea igual al de Escritura

static tpLecturas_9DOF_IMU Lecturas_IMU_9DOF_FIFO[NUM_ELEMENTOS_BUFFER_IMU];

/*  MUTEX  */
osMutexId MutexVariablesEstado;
osMutexId MutexAHRS;

/*  VARIABLES ALMACENADAS  */
static q15_t VariablesEstadoAlmacenadas[NUM_VAR_ESTADO];
static tpAHRS AHRSAlmacenado;

void IniciarServidoresVariables(){
	MutexVariablesEstado = xSemaphoreCreateMutex();
	MutexAHRS = xSemaphoreCreateMutex();
}

void LeerVariablesEstado_Q16(q15_t VariablesEstado[NUM_VAR_ESTADO]){

	xSemaphoreTake(MutexVariablesEstado, portMAX_DELAY);
	memcpy(VariablesEstado, VariablesEstadoAlmacenadas, sizeof(VariablesEstadoAlmacenadas));
	xSemaphoreGive(MutexVariablesEstado);

}

void EscribirVariablesEstado_Q16(q15_t VariablesEstado[NUM_VAR_ESTADO]){

	xSemaphoreTake(MutexVariablesEstado, portMAX_DELAY);
	memcpy(VariablesEstadoAlmacenadas, VariablesEstado, sizeof(VariablesEstadoAlmacenadas));
	xSemaphoreGive(MutexVariablesEstado);
}

tpLecturas_9DOF_IMU* dirFIFOLecturasIMU9DOF(){
	return (&(Lecturas_IMU_9DOF_FIFO[IndiceEscrituraIMU]));
}

uint8_t* dirIndiceEscrituraFIFOLecturasIMU9DOF(){
	return (&IndiceEscrituraIMU);
}

uint8_t LeerDatosIMUFIFO(q15_t VelAngular_X[], q15_t VelAngular_Y[], q15_t VelAngular_Z[],
						 q15_t AcelAngular_X[], q15_t AcelAngular_Y[], q15_t AcelAngular_Z[],
						 q15_t MagAngular_X[], q15_t MagAngular_Y[], q15_t MagAngular_Z[]){

	uint8_t i = 0;
	while(IndiceLecturaIMU < IndiceEscrituraIMU){
		VelAngular_X[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.x_vel;
		VelAngular_Y[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.y_vel;
		VelAngular_Z[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.z_vel;

		AcelAngular_X[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.x_acel;
		AcelAngular_Y[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.y_acel;
		AcelAngular_Z[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.z_acel;

		MagAngular_X[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.x_mag;
		MagAngular_Y[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.y_mag;
		MagAngular_Z[i] = Lecturas_IMU_9DOF_FIFO[IndiceLecturaIMU].Valor.z_mag;

		IndiceLecturaIMU++;
		i++;
	}
	return (i);
}


void LeerVariableAHRS(tpAHRS* AHRS){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	memcpy(AHRS, &AHRSAlmacenado, sizeof(AHRSAlmacenado));
	xSemaphoreGive(MutexAHRS);
}

void EscribirVariableAHRS(tpAHRS* AHRS){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	memcpy(&AHRSAlmacenado, AHRS, sizeof(AHRSAlmacenado));
	xSemaphoreGive(MutexAHRS);
}

void LeerRollPitchYaw(q15_t Roll, q15_t Pitch, q15_t Yaw){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	Roll = AHRSAlmacenado.Roll;
	Pitch = AHRSAlmacenado.Pitch;
	Yaw = AHRSAlmacenado.Yaw;
	xSemaphoreGive(MutexAHRS);
}
