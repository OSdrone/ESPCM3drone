/*
 * ServidoresVariables.c
 *
 *  Created on: 12 de oct. de 2016
 *      Author: Ruben
 */

#include "ServidoresVariables.h"

/*  FILA  */
static volatile uint8_t IndiceEscrituraIMU = 0; //Indica Posicion a rellenar
static volatile uint8_t IndiceLecturaIMU = 0; //Debe leerse hasta que sea igual al de Escritura

static volatile int16_t Lecturas_AcelAlmacenadas[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU];
static volatile int16_t Lecturas_GyroAlmacenadas[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU];
static volatile int16_t Lecturas_MagAlmacenadas[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU];


/*  MUTEX  */
osMutexId MutexVariablesEstado;
osMutexId MutexAHRS;

/*  VARIABLES ALMACENADAS  */
static q15_t VariablesEstadoAlmacenadas[NUM_VAR_ESTADO];
static tpAHRS AHRSAlmacenado;

void IniciarServidoresVariables(){
	MutexVariablesEstado = xSemaphoreCreateMutex();
	MutexAHRS = xSemaphoreCreateMutex();
}

void LeerVariablesEstado_Q16(q15_t VariablesEstado[NUM_VAR_ESTADO]){

	xSemaphoreTake(MutexVariablesEstado, portMAX_DELAY);
	memcpy(VariablesEstado, VariablesEstadoAlmacenadas, sizeof(VariablesEstadoAlmacenadas));
	xSemaphoreGive(MutexVariablesEstado);

}

void EscribirVariablesEstado_Q16(q15_t VariablesEstado[NUM_VAR_ESTADO]){

	xSemaphoreTake(MutexVariablesEstado, portMAX_DELAY);
	memcpy(VariablesEstadoAlmacenadas, VariablesEstado, sizeof(VariablesEstadoAlmacenadas));
	xSemaphoreGive(MutexVariablesEstado);
}

uint8_t EscribirDatosIMUFIFO(tpLecturas_9DOF_IMU Lecturas_9DOF_IMU){

	Lecturas_AcelAlmacenadas[0][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.x_acel;
	Lecturas_AcelAlmacenadas[1][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.y_acel;
	Lecturas_AcelAlmacenadas[2][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.z_acel;

	Lecturas_GyroAlmacenadas[0][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.x_vel;
	Lecturas_GyroAlmacenadas[1][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.y_vel;
	Lecturas_GyroAlmacenadas[2][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.z_vel;

	Lecturas_MagAlmacenadas[0][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.x_mag;
	Lecturas_MagAlmacenadas[1][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.y_mag;
	Lecturas_MagAlmacenadas[2][IndiceEscrituraIMU] = Lecturas_9DOF_IMU.Valor.z_mag;

	IndiceEscrituraIMU++;
	return((uint8_t)(IndiceLecturaIMU - IndiceEscrituraIMU));
}

uint8_t LeerDatosIMUFIFO(q15_t Velocidad[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU],
		 q15_t Aceleracion[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU],
		 q15_t Magnetico[NUM_EJES_CONTROL][NUM_ELEMENTOS_BUFFER_IMU]){

	uint8_t DatosLeidos = (IndiceEscrituraIMU - IndiceLecturaIMU);

	memcpy(Aceleracion, Lecturas_AcelAlmacenadas, DatosLeidos);
	memcpy(Velocidad, Lecturas_GyroAlmacenadas, DatosLeidos);
	memcpy(Magnetico, Lecturas_MagAlmacenadas, DatosLeidos);

	IndiceLecturaIMU += DatosLeidos;

	return (DatosLeidos);
}


void LeerVariableAHRS(tpAHRS* AHRS){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	memcpy(AHRS, &AHRSAlmacenado, sizeof(AHRSAlmacenado));
	xSemaphoreGive(MutexAHRS);
}

void EscribirVariableAHRS(tpAHRS* AHRS){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	memcpy(&AHRSAlmacenado, AHRS, sizeof(AHRSAlmacenado));
	xSemaphoreGive(MutexAHRS);
}

void LeerRollPitchYaw(q15_t Roll, q15_t Pitch, q15_t Yaw){
	xSemaphoreTake(MutexAHRS, portMAX_DELAY);
	Roll = AHRSAlmacenado.Roll;
	Pitch = AHRSAlmacenado.Pitch;
	Yaw = AHRSAlmacenado.Yaw;
	xSemaphoreGive(MutexAHRS);
}
